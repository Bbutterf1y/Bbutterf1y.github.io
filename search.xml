<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GO基础学习（一）</title>
      <link href="2021/12/09/GO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2021/12/09/GO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h4><p>Mac 下载go地址：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p><p>下载x86或arm架构的pkg包双击安装即可</p><h4 id="2-GOROOT和GOPATH"><a href="#2-GOROOT和GOPATH" class="headerlink" title="2.GOROOT和GOPATH"></a>2.GOROOT和GOPATH</h4><p>GOROOT：go的安装路径</p><p>GOPATH：go的工作路径</p><p>GOPATH约定有三个子目录</p><ul><li>src目录：存放源代码</li><li>pkg目录：编译时生成的中间文件</li><li>bin目录：编译后生成的可执行文件</li></ul><h4 id="3-go语言结构（以Hello-World！为例）"><a href="#3-go语言结构（以Hello-World！为例）" class="headerlink" title="3.go语言结构（以Hello,World！为例）"></a>3.go语言结构（以Hello,World！为例）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包声明 package main</span><br><span class="line"></span><br><span class="line">引入包 import “fmt&quot;</span><br><span class="line"></span><br><span class="line">函数 func main\(\)</span><br><span class="line"></span><br><span class="line">语句 fmt.Println\(“Hello,World\!&quot;\)</span><br><span class="line"></span><br><span class="line">注释 &#x2F;&#x2F;go的简单实例</span><br></pre></td></tr></table></figure><p>注意：a.标识符以大写字母开头时，可以被外部包代码使用，如果小写字母开头，则不可见</p><p>b.{不能单独放在一行</p><h4 id="4-变量声明"><a href="#4-变量声明" class="headerlink" title="4.变量声明"></a>4.变量声明</h4><p>声明单个变量：<code>var a int</code> </p><p><code>a=1</code></p><p>不赋值时默认为0值</p><p>或<code>var a=1</code> </p><p>或<code>a := 1</code></p><p>注：如果已经用var声明过再使用:=声明会报错</p><p>声明多个变量：<code>var a,b = 1,2</code></p><p><code>a,b := 1,2</code></p><p>空白标识符_ 用于抛弃值</p><h4 id="5-常量声明"><a href="#5-常量声明" class="headerlink" title="5.常量声明"></a>5.常量声明</h4><p><code>const a int = 1</code>或</p><p><code>const a =1</code></p><p>常量枚举 <code>const&#123;</code></p><p><code>a=1</code></p><p><code>b=2</code></p><p><code>c=3</code></p><p><code>&#125;</code></p><p>iota特殊常量，在const中使用iota后iota的值为当前const枚举的常量的个数</p><h4 id="6-条件语句"><a href="#6-条件语句" class="headerlink" title="6.条件语句"></a>6.条件语句</h4><p>go中有select语句没有三元运算符，select语句是随机执行case语句内容，执行到可运行case停止</p><h4 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7.循环语句"></a>7.循环语句</h4><p>go只有for循环</p><h4 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8.结构体"></a>8.结构体</h4><p>结构体作为函数参数时写法为<code>func test\(book books\)&#123;&#125;。</code></p><p>输出结构体的指针时使用fmt.Println()默认为%v输出，使用%p可以输出地址</p><h4 id="9-切片"><a href="#9-切片" class="headerlink" title="9.切片"></a>9.切片</h4><p>go的切片是因为go数组长度不可变，为了使用可变长度的数组，抽象出了切片</p><p>切片初始化 直接初始化：<code>s := \[ \]int &#123;1,2,3&#125;</code></p><p>用数组初始化：<code>s := arr \[:\]</code></p><p>使用make()函数初始化：<code>s :=make\(\[ \]int,5,10\)</code> 5是切片初始长度，10是最大长度</p><p>make()创建后赋值时需要一个值一个值进行赋值</p><h4 id="10-range"><a href="#10-range" class="headerlink" title="10.range"></a>10.range</h4><p>range关键字用于for <code>a,b := range “cd”</code></p><p>将cd字符串赋值给a,b变量，c字符的索引是第一个参数，字符的Unicode值是第二个参数</p><p>数组上使用range时，返回的第一个值为数组的索引，不需要可以使用_代替</p><h4 id="11-map集合"><a href="#11-map集合" class="headerlink" title="11.map集合"></a>11.map集合</h4><p>无序的键值对集合</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a map\[string\]string&#x2F;&#x2F;声明map</span><br><span class="line"></span><br><span class="line">a &#x3D; make\(map\[string\]string\)&#x2F;&#x2F;使用make函数</span><br><span class="line"></span><br><span class="line">a\[“k”\] &#x3D; “v”&#x2F;&#x2F;为map插入键值对</span><br><span class="line"></span><br><span class="line">或 a &#x3D;: map\[string\]string&#123;“k”:”v”&#125;</span><br></pre></td></tr></table></figure><h4 id="12-接口"><a href="#12-接口" class="headerlink" title="12.接口"></a>12.接口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type phone interface&#123;</span><br><span class="line"></span><br><span class="line">    test\(\)</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;定义接口</span><br><span class="line"></span><br><span class="line">type Iphone struct&#123;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;定义结构体</span><br><span class="line"></span><br><span class="line">func\(iphone13 Iphone\) test\(\)&#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println\(5888\)</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;实现接口方法</span><br></pre></td></tr></table></figure><p>使用时定义一个接口类型的变量iPhone phone，然后给变量赋值iPhone = new(Iphone)调用test()方法IPhone.test()</p><h4 id="13-并发"><a href="#13-并发" class="headerlink" title="13.并发"></a>13.并发</h4><p>go的并发通过go关键字开启goroutine 例 <code>goroutine f\(x\) f\(y\)</code> </p><p>同一个程序中所有的goroutine共享一个地址空间</p><h4 id="14-chanel"><a href="#14-chanel" class="headerlink" title="14.chanel"></a>14.chanel</h4><p>channel用来传递数据结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ch \-\&gt; v 把v发送到通道</span><br><span class="line"></span><br><span class="line">v :&#x3D; ch 从ch接收数据</span><br><span class="line"></span><br><span class="line">ch :&#x3D; make\(chan int\)创建一个通道</span><br></pre></td></tr></table></figure><p>通道不带缓冲区，发送端发送数据时接收端要及时接受数据</p><p>可以设置缓冲区，创建通道时make的第二个参数是缓冲区的大小</p><p>缓冲区大小是有限的，当缓冲区满时，发送端将会不能发送数据</p><p>close()函数关闭通道</p><h4 id="15-错误处理"><a href="#15-错误处理" class="headerlink" title="15.错误处理"></a>15.错误处理</h4><p>go的错误处理是通过error接口</p><h4 id="16-附"><a href="#16-附" class="headerlink" title="16.附"></a>16.附</h4><p>fmt.Println函数和println函数的区别在于，fmt.Println函数能输出全部类型，是标准输出，而println对有些类型的输出不支持</p><p>nil为空指针</p><p>格式化字符串 fmt.Sprintf()</p><p>在函数参数位置和返回值位置都可以直接赋值。例：<code>func f\(a int\)\(b int\)&#123;&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo（butterfly主题）+github搭建个人博客</title>
      <link href="2021/12/07/hexo%EF%BC%88butterfly%E4%B8%BB%E9%A2%98%EF%BC%89+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/12/07/hexo%EF%BC%88butterfly%E4%B8%BB%E9%A2%98%EF%BC%89+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Node-js">https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Node-js</a></p><p>主题文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>安装Node.js（<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>）和Git（<a href="https://gitforwindows.org/">https://gitforwindows.org/</a>）</p></li><li><p>安装hexo：npm install -g hexo-cli</p></li><li><p>初始化：hexo init blog（folder/本地blog文件路径）或直接在想要放blog位置执行命令</p><p>执行完将在目录下出现以下文件 </p></li></ol><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321735.png" alt="441897d1cc251e4b1dcc13c96a697543.png"></p><p>各目录作用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.yml：网站配置信息，配置参数</span><br><span class="line"></span><br><span class="line">themes： 主题文件夹，存放主题</span><br><span class="line"></span><br><span class="line">scaffolds：模板文件夹，根据模板文件创建</span><br><span class="line"></span><br><span class="line">source：存放资源的文件夹，\_开头的文件会被忽略（\_posts除外），\_posts文件存放md文件（博客文章）</span><br></pre></td></tr></table></figure><ol start="4"><li>主题安装：git clone -b master <a href="https://github.com/jerryc127/hexo/-theme/-butterfly.git">https://github.com/jerryc127/hexo\-theme\-butterfly.git</a> themes/Butterfly</li></ol><p>   注：自定义主题安装时可以更改github链接和文件名</p><p>   主题应用：修改_config.yml文件的theme：Bbutterfly</p><p>   把themes/butterfly文件夹中的 _config.yml 复制到博客根目录里，同时重新命名为 _config.butterfly.yml便于后续git pull平滑升级主题</p><ol start="5"><li>生成静态页面：hexo g</li></ol><p>   成功后会在blog目录下生成project文件夹，文件夹中存放页面html</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321421.png" alt="9578d142d1cb6f1c468c0c2eca7bc2bc.png"></p><p>   如果报错安装cheerio：npm install <a href="mailto:&#x63;&#104;&#x65;&#101;&#114;&#105;&#x6f;&#64;&#48;&#x2e;&#x32;&#x32;&#x2e;&#x30;">&#x63;&#104;&#x65;&#101;&#114;&#105;&#x6f;&#64;&#48;&#x2e;&#x32;&#x32;&#x2e;&#x30;</a> –save（hexo 4.2以上的系统需要安装cheerio）</p><ol start="6"><li>启动服务器：hexo s</li></ol><p>   运行localhost:4000</p><p>   报错如下：</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321786.png" alt="c068f8e1b49573b24a33532a514553e0.png"></p><p>   安装pub和stylus渲染器：npm install hexo-renderer-pug hexo-renderer-stylus --save</p><p>   再次启动服务器运行可查看到正常页面</p><ol start="7"><li><p>部署到github</p><ol><li><p>创建仓库：仓库名建议设置为 github用户名</p></li><li><p>配置git（详细内容省略可查阅博客文章）</p></li><li><p>上传博客文件到github</p><ol><li><p>配置_config.yml的repo信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: 仓库地址</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure></li><li><p>安装插件：npm install hexo-deployer-git –save</p></li><li><p>上传代码：hexo d</p></li><li><p>刷新仓库网址即可看到自己刚才上传的文件</p></li></ol></li></ol></li></ol><h3 id="配置静态站点"><a href="#配置静态站点" class="headerlink" title="配置静态站点"></a>配置静态站点</h3><p>点击Settings,下滑到GitHub Pages配置，可以看到已经存在为我们发布了静态的页面username.github.io。</p><p><strong><u>到此一个博客系统已经搭建完成，借用github的服务器存储，后面为博客美化和完善</u></strong></p><h4 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h4><p>在域名位置添加解析</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321480.png" alt="c523643a0bc75f27cf9417b00617aabd.png"></p><p>添加内容如下</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321536.png" alt="49513cc974da6e852aeabd13ae3e2f90.png"></p><p>记录类型A 主机记录@ 解析线路国外（海外域名选默认） 记录值ip地址（ping <a href="https://bbutterf1y.github.io/">bbutterf1y.github.io</a>（github域名）查看ip地址）</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321663.png" alt="b4f72d0a33f23b83e7fc34c7c18664c9.png"></p><p>记录类型CNAME 主机记录www 解析线路国外（默认） 记录值github域名</p><p>保存后配置CNAME：在source目录新建CNAME文件，输入个人域名地址，保存</p><p>依次执行hexo clean</p><p>hexo g</p><p>hexo d </p><p>成功后，查看就可以发现域名已经修改</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062321178.png" alt="e06ef99d6ec1f90da71d895e8b959b8a.png"></p><h4 id="文章搜索（本地搜索）"><a href="#文章搜索（本地搜索）" class="headerlink" title="文章搜索（本地搜索）"></a>文章搜索（本地搜索）</h4><p>插件官方github：<a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>安装搜索插件：npm install hexo-generator-search --save</p><p>配置插件：在博客根目录的_config.yml最后插入下面代码</p><p>search:</p><p> path: search.xml</p><p> field: post</p><p> content: true</p><p>各参数详解</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062322169.png" alt="f2799f298892a39f8df41bb60e2d81ce.png"></p><p>更改butterfly配置打开本地搜索功能</p><h4 id="评论留言"><a href="#评论留言" class="headerlink" title="评论留言"></a>评论留言</h4><p>以valine为例 valine官方文档<a href="https://valine.js.org/">https://valine.js.org/</a></p><p>打开评论功能，在use参数配置所使用的评论，留空为不使用，text参数选择是否选择服务商名字，count选择是否在文章顶部显示评论数</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062322187.png" alt="5862ea0a51ccf249518cf3daefebb23d.png"></p><p>注册Leancloud用来管理评论（<a href="https://console.leancloud.cn/">https://console.leancloud.cn</a>）在控制台中创建应用，创建完成后，从设置中获得APP ID APP key和REST API 服务器地址</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062322304.png" alt="e95afd1fbe17efcdedcb46ca5a1517ef.png"></p><p>将appid appkey REST API 服务器地址 写入设置文档中</p><p><img src="https://gitee.com/bbutterf1y/blogimg/raw/master/img/202202062322515.png" alt="DDF12BEB-5120-4F45-97FA-B1290EB2258D.png"></p><h4 id="创建其他链接页面（以友链页面为例）"><a href="#创建其他链接页面（以友链页面为例）" class="headerlink" title="创建其他链接页面（以友链页面为例）"></a>创建其他链接页面（以友链页面为例）</h4><p>hexo new page link</p><p>修改source/link/index.md文件相关参数如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line"></span><br><span class="line">date: 生成时自动生成</span><br><span class="line"></span><br><span class="line">type: “link&quot;</span><br><span class="line"></span><br><span class="line">comments: 评论</span><br><span class="line"></span><br><span class="line">top\_img:顶部图片</span><br></pre></td></tr></table></figure><p>其余效果美化查阅butterfly官方文档多为参数选择配置在此不作过多解释</p><p><strong><u>文章的最后是博客写作方法（以.md格式为例）</u></strong></p><p>直接使用md文件即可，在文件顶部用—回车分隔写入文章配置，可配置参数如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line"></span><br><span class="line">date: 文章创建日期</span><br><span class="line"></span><br><span class="line">tags: 文章标签</span><br><span class="line"></span><br><span class="line">categories: 文章分类</span><br><span class="line"></span><br><span class="line">keywords: 文章关键字</span><br><span class="line"></span><br><span class="line">description: 文章描述</span><br><span class="line"></span><br><span class="line">top\_img: 文章顶部图片</span><br><span class="line"></span><br><span class="line">comments: 文章评论模块</span><br><span class="line"></span><br><span class="line">cover: 文章缩略图</span><br><span class="line"></span><br><span class="line">highlight\_shrink: 代码框是否展开</span><br><span class="line"></span><br><span class="line">aside: 显示侧边栏</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="2021/12/04/hello-world/"/>
      <url>2021/12/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>​    2020年是不平凡的一年……</p><p>​    博客最终还是出事了，对，2020年当写下上面那句话时，我因为整天玩，最终博客被搁置了，学习也停止了。时间过得很快，现在是2021年最后一个月，这一年做了一些事也想了很多问题，重新将这个博客搭起来是希望自己拯救一次自己，不要无止境的堕落下去。</p><p>​    删除了之前的所有文章，仔细想了想无意义的东西没有必要写在博客，以后的文章尽量记录自己的想法。</p><p>​    太多感受就不写了，这些东西就等以后有所成再发，现在还是从0开始潜心磨练，提升自己。</p>]]></content>
      
      
      <categories>
          
          <category> 生活杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<p>ID：Bbutterf1y</p><p>在校学生</p><p>安全学习失败者</p><p>躺平选手</p><hr /><p>博主留言：欢迎来到我的博客，在这里我会不定期写下自己的一些学习笔记，一堆废话和希望能够帮助到一些人的文章。如果想要联系到我可以在主页戳我或者给我留言。如果文章中有什么错误望理解，谢谢。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="inject/style.css"/>
      <url>inject/style.css</url>
      
        <content type="html"><![CDATA[#page-header.not-index-bg{height:30rem;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>好兄弟萌のblog</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="messageboard/index.html"/>
      <url>messageboard/index.html</url>
      
        <content type="html"><![CDATA[<p>Hey!有什么想说的可以留在下面，看到会回复。</p><p>友链添加也可以留言，格式为：</p><p>​    - name: Bbutterf1y</p><p>​      link: <a href="http://www.bbutterf1y.top/">www.bbutterf1y.top</a></p><p>​      avatar: <a href="https://www.bbutterf1y.top/img/avatar.png">https://www.bbutterf1y.top/img/avatar.png</a></p><p>​      descr: 一个放置着乱七八糟的地方</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="messageboard/test.html"/>
      <url>messageboard/test.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
